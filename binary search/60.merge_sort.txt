//Merge sort is a divide-and-conquer algorithm that recursively divides the array into halves, sorts each half, and then merges the sorted halves to produce a sorted array. 

//In this code, mergeSort is the main function that recursively divides the array into halves until the base case (array length <= 1) is reached. The merge function is responsible for merging two sorted arrays into a single sorted array. The final sorted array is obtained by calling mergeSort on the original array.




A = [3, 4, 1, 2]
solve(A)
function solve(A) {
    countMerge(A, 0, A.length - 1);
    console.log(A)
    // s- start
    //e-end
    function countMerge(A, s, e) {
        if (s == e) return;
        let m = parseInt((s + e) / 2);
        countMerge(A, s, m);
        countMerge(A, m + 1, e);
        sortedMerge(A, s, m, e);
    }
    function sortedMerge(A, s, m, e) {
        let temp = new Array(e - s + 1)
        let p1 = s;// start of array-1
        let p2 = m + 1// start of array-2
        let p3 = 0;
        while (p1 <= m && p2 <= e) {
            if (A[p1] <= A[p2]) {
                temp[p3] = A[p1];
                p1++;
                p3++;

            }
            else {
                temp[p3] = A[p2];
                p3++;
                p2++;
            }
        }
        while (p1 <= m) {
            temp[p3] = A[p1];
            p1++;
            p3++;
        }
        while (p2 <= e) {
            temp[p3] = A[p2];
            p3++;
            p2++;
        }
        p3 = 0;
        for (let i = s; i <= e; i++) {
            A[i] = temp[p3];
            p3++;
        }
    }
}