
Problem Statement:

Given an integer array arr of size N, sorted in ascending order (with distinct values) and a target value k. Now the array is rotated at some pivot point unknown to you. Find the index at which k is present and if k is not present return -1.

Examples:-

Example 1:
Input Format: arr = [4,5,6,7,0,1,2,3], k = 0
Result: 4
Explanation: Here, the target is 0. We can see that 0 is present in the given rotated sorted array, nums. Thus, we get output as 4, which is the index at which 0 is present in the array.

Example 2:
Input Format: arr = [4,5,6,7,0,1,2], k = 3
Result: -1
Explanation: Here, the target is 3. Since 3 is not present in the given rotated sorted array. Thus, we get the output as -1.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Brute Force Approach :
Algorithm / Intuition :
Naive Approach (Brute force): 
One straightforward approach we can consider is using the linear search algorithm. Using this method, we will traverse the array to find the location of the target value. If it is found we will simply return the index and otherwise, we will return -1.

CODE: 

function search(arr, n, k) {
    for (let i = 0; i < n; i++) {
        if (arr[i] === k)
            return i;
    }
    return -1;
}

let arr = [7, 8, 9, 1, 2, 3, 4, 5, 6];
let n = 9, k = 1;
let ans = search(arr, n, k);
if (ans === -1)
    console.log("Target is not present.");
else
    console.log("The index is:", ans);

Complexity Analysis :
Time Complexity: O(N), N = size of the given array.
Reason: We have to iterate through the entire array to check if the target is present in the array.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach
Algorithm / Intuition
Optimal Approach(Using Binary Search): 

Complexity Analysis :
Time Complexity: O(logN), N = size of the given array.
Reason: We are using binary search to search the target.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// arr has distinct values :-
function search(arr, n, k) {
    let low = 0;
    let high = n - 1;
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        // if mid points to the target
        if (arr[mid] === k) return mid;
        // if left part of mid is sorted
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= k && k <= arr[mid]) {
                // element surly exists in left part of mid, so discard the right part
                high = mid - 1;
            } else {
                // element exists in right part of mid, so discard the left part
                low = mid + 1;
            }
        } else {
            // if right part is sorted
            if (arr[mid] <= k && k <= arr[high]) {
                // element exists in right part , so discard the left part.
                low = mid + 1;
            } else {
                // element  element exists in left part , so discard the right part.
                high = mid - 1;
            }
        }
    }
    return -1;
}

let arr = [7, 8, 9, 1, 2, 3, 4, 5, 6];
let n = 9,
    k = 1;
let ans = search(arr, n, k);
if (ans === -1) console.log("Target is not present.");
else console.log("The index is:", ans);

