Problem Description :

Given a matrix of integers A of size N x M in which each row is sorted.

Find and return the overall median of matrix A.

NOTE: No extra memory is allowed.

NOTE: Rows are numbered from top to bottom and columns are numbered from left to right.

Problem Constraints :-

1 <= N, M <= 10^5
1 <= N*M <= 10^6
1 <= A[i] <= 10^9
N*M is odd

Input Format :

The first and only argument given is the integer matrix A.



Output Format :-

Return the overall median of matrix A.

Example Input
Input 1:

A = [   [1, 3, 5],
        [2, 6, 9],
        [3, 6, 9]   ] 
Input 2:

A = [   [5, 17, 100]    ]


Example Output
Output 1:

 5 
Output 2:

 17


Example Explanation
Explanation 1:

A = [1, 2, 3, 3, 5, 6, 6, 9, 9]
Median is 5. So, we return 5. 
Explanation 2:

Median is 17.



//======================================================================================

//logic : the median is >= (N*M)/2 +1 elements in A
function countSmallerThanMid(matrix, mid, column) {
  let l = 0,
    h = column - 1;
  while (l <= h) {
    let md = parseInt((l + h) / 2);
    if (matrix[md] <= mid) {
      l = md + 1; // move rightwards
    } else {
      h = md - 1; // move leftwards
    }
  }
  //we are trying to maximum the count , so l moves from low to high , so return l, bcz h and l have cross-over
  return l;
}

function median(matrix, R, C, low, high) {
  let n = R; //row
  let m = C; //column
  while (low <= high) {
    // here mid is the number and not the index
    let mid = parseInt((low + high) / 2);
    let cnt = 0;
    for (let row = 0; row < n; row++) {
      cnt += countSmallerThanMid(matrix[row], mid, C);
    }
    //the median is >= (N*M)/2 +1 elements in A
    if (cnt <= (n * m) / 2) low = mid + 1;
    else high = mid - 1;
  }
  return low;
}

A = [
  [1, 3, 5],
  [2, 6, 9],
  [3, 6, 9],
];
let low = Number.MAX_SAFE_INTEGER;
let high = Number.MIN_SAFE_INTEGER;
for (let i = 0; i < A.length; i++) {
  low = Math.min(low, A[i][0]);
  high = Math.max(high, A[i][A[0].length - 1]);
}
let ans = median(A, A.length, A[0].length, low, high);
console.log(ans);
+