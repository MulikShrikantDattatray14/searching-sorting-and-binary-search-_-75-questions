Problem Statement:

You are given a sorted array containing N integers and a number X, you have to find the occurrences of X in the given array.

Examples
Example 1:
Input: N = 7,  X = 3 , array[] = {2, 2 , 3 , 3 , 3 , 3 , 4}
Output: 4
Explanation: 3 is occurring 4 times in 
the given array so it is our answer.

Example 2:
Input: N = 8,  X = 2 , array[] = {1, 1, 2, 2, 2, 2, 2, 3}
Output: 5
Explanation: 2 is occurring 5 times in the given array so it is our answer.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Brute Force Approach :
Algorithm / Intuition : 
Approach:
The approach is simple. We will linearly search the entire array, and try to increase the counter whenever we get the target value in the array. Using a for loop that runs from 0 to n – 1, containing an if the condition that checks whether the value at that index equals target. If true then increase the counter, at last return the counter.

CODE :

function count(arr, n, x) {
    let cnt = 0;
    for (let i = 0; i < n; i++) {
        // counting the occurrences:
        if (arr[i] === x) cnt++;
    }
    return cnt;
}

let arr = [2, 4, 6, 8, 8, 8, 11, 13];
let n = 8, x = 8;
let ans = count(arr, n, x);
console.log("The number of occurrences is:", ans);



Complexity Analysis :
Time Complexity: O(N), N = size of the given array
Reason: We are traversing the whole array.

Space Complexity: O(1) as we are not using any extra space.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach
Algorithm / Intuition
Optimal Approach(Binary Search): 

Complexity Analysis
Time Complexity: O(2*logN), where N = size of the given array.
Reason: We are basically using the binary search algorithm twice.

Space Complexity: O(1) as we are using no extra space.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



function firstOccurrence(arr, n, k) {
    let low = 0; let high = n - 1;
    let first = -1;

    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        // maybe an answer
        if (arr[mid] === k) {
            first = mid;
            // look for smaller index on the left
            high = mid - 1;
        }
        else if (arr[mid] < k) {
            low = mid + 1; // look on the right,so ignore the left window
        }
        else {
            high = mid - 1; // look on the left, so ignore the right window
        }
    }
    return first;
}

function lastOccurrence(arr, n, k) {
    let low = 0, high = n - 1;
    let last = -1;

    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        // maybe an answer
        if (arr[mid] === k) {
            last = mid;
            // look for larger index on the right
            low = mid + 1;
        }
        else if (arr[mid] < k) {
            low = mid + 1; // look on the right
        }
        else {
            high = mid - 1; // look on the left
        }
    }
    return last;
}

function firstAndLastPosition(arr, n, k) {
    let first = firstOccurrence(arr, n, k);
    if (first === -1) return [-1, -1];
    let last = lastOccurrence(arr, n, k);
    return [first, last];
}
// After getting the indices, we will check the following cases:
// If the first index == -1: This means that the target value is not present in the array. So, we will return 0 as the answer.
// Otherwise: We will find the total number of occurrences like this:
// The total number of occurrences  = (last index – first index + 1) and return this length as the answer.


function count(arr, n, x) {
    let [first, last] = firstAndLastPosition(arr, n, x);
    if (first === -1) return 0;
    return last - first + 1;
}

let arr = [2, 4, 6, 8, 8, 8, 11, 13];
let n = 8, x = 8;
let ans = count(arr, n, x);
console.log("The number of occurrences is:", ans);