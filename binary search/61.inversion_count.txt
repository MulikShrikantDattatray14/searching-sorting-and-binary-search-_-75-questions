
Problem Description :-

Given an array of integers A. If i < j and A[i] > A[j], then the pair (i, j) is called an inversion of A. Find the total number of inversions of A modulo (10^9 + 7).


Problem Constraints:-

1 <= length of the array <= 105

1 <= A[i] <= 109

Input Format:-

The only argument given is the integer array A.

Output Format:-
Return the number of inversions of A modulo (109 + 7).



Example Input
Input 1:

A = [1, 3, 2]
Input 2:

A = [3, 4, 1, 2]


Example Output
Output 1:

1
Output 2:

4


Example Explanation
Explanation 1:

The pair (1, 2) is an inversion as 1 < 2 and A[1] > A[2]
Explanation 2:

The pair (0, 2) is an inversion as 0 < 2 and A[0] > A[2]
The pair (0, 3) is an inversion as 0 < 3 and A[0] > A[3]
The pair (1, 2) is an inversion as 1 < 2 and A[1] > A[2]
The pair (1, 3) is an inversion as 1 < 3 and A[1] > A[3]

=======================================================================================================
//solution approach :-

Naive Approach Traverse through the array from start to end Find the count of elements smaller than the current number up to that index for every element using another loop. Sum up the count of inversion for every index. Print the count of inversions.

Efficient Approach using Merge Sort

Suppose we know the number of inversions in the left half and the right half of the array, lets call them inv_l and inv_r.
Which inversions are not counted in inv_l+inv_r ? The elements in the left half which are greater than the elements in the right half. These are the inversions which are not counted.

Lets assume that both left half and right half are sorted. Can we count the number of inversions now?
We can just merge the two arrays and whenever we find that a[i] > a[j] (where i is the pointer of left half of the array and j is the pointer of the right half of the array) we simply increment the number of inversions.
The final answer will be inv_l + inv_r + number of inversions found during merge step.

Does this remind of a famous algorithm?

Yes, thats right. It is Merge Sort with a slight modification.

=========================================================================================================
Brute force : 

//brute force :-
----------------
A = [1, 3, 2, 3, 1]//2
//A = [4, 1, 2]//1
let n = A.length;
let count = 0;
for (let j = 0; j < n; j++) {
    for (let i = 0; i < j; i++) {
        if (A[i] > A[j]) {
            count++;
        }
    }
}
console.log(count)

===============================================================================================================================================================================================================================
//optimal approach :-

A = [3, 4, 1, 2]
let ans = solve(A)
console.log(ans)
function solve(A) {
    let count = 0;
    countMerge(A, 0, A.length - 1);

    // s- start
    //e-end
    // while mergeing we count inversions 
    function countMerge(A, s, e) {
        if (s == e) return;
        let m = parseInt((s + e) / 2);
        countMerge(A, s, m);
        countMerge(A, m + 1, e);
        sortedMerge(A, s, m, e);
    }

    function sortedMerge(A, s, m, e) {
        let size = e - s + 1;
        let temp = [];
        let p1 = s;// start of array-1
        let p2 = m + 1// start of array-2
        let p3 = 0;

        while (p1 <= m && p2 <= e) {
            if (A[p1] <= A[p2]) {
                temp[p3] = A[p1];
                p1++;
                p3++;

            }
            else if (A[p1] > A[p2]) {
                // If i < j and A[i] > A[j], then the pair (i, j) is called an inversion of A.
                temp[p3] = A[p2];
                p3++;
                p2++;
                // p1+1 is the remaining elements in the first half
                count = (count + (m - p1 + 1)) % 1000000007;
            }
        }
        while (p1 <= m) {
            temp[p3] = A[p1];
            p1++;
            p3++;
        }
        while (p2 <= e) {
            temp[p3] = A[p2];
            p3++;
            p2++;
        }

        for (let i = 0; i < size; i++) {
            A[s + i] = temp[i];
        }

    }


    return (count);

}