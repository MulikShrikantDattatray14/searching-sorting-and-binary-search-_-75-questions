
Problem Description:-

Given an array of integers A, we call (i, j) an important reverse pair if i < j and A[i] > 2*A[j].
Return the number of important reverse pairs in the given array A.



Problem Constraints
1 <= length of the array <= 10^5

-2 * 109 <= A[i] <= 2 * 10^9



Input Format:-
The only argument given is the integer array A.



Output Format:-
Return the number of important reverse pairs in the given array A.



Example Input:-
Input 1:

 A = [1, 3, 2, 3, 1]
Input 2:

 A = [4, 1, 2]


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 There are two pairs which are important reverse pair 
 i.e  (1, 4) => A[1] > 2 * A[4] => 3 > 2 * 1 => 3 > 2 and
      (3, 4) => A[3] > 2 * A[4] => 3 > 2 * 1 => 3 > 2.
Explanation 2:

 There is only one pair 
 i.e (0, 1) => A[0] > 2 * A[1] => 4 > 2 * 1 => 4 > 1

 ==============================================================================================================================================================================================================================
 //solution approach :-

 We can use two loops and calculate the number of pairs that satisfy the condition, 
but the time complexity will be O(N^2), which will not work in the worst case. 

So we can think of a better solution, i.e., using merge sort.
 
We will do a usual merge sort, but before calling the merge function, 
we will calculate the number of pairs using two pointers, 
considering that the two arrays are sorted individually. 

Likewise, we will do this till our mergesort ends, i.e., the array becomes sorted.

===========================================================================================================
//brute force :-
----------------
A = [1, 3, 2, 3, 1]//2
//A = [4, 1, 2]//1
let n = A.length;
let count = 0;
for (let j = 0; j < n; j++) {
    for (let i = 0; i < j; i++) {
        if (A[i] > 2 * A[j]) {
            count++;
        }
    }
}
console.log(count)
============================================================================================================
optimised approach :-
-------------------

// Example usage:
let A = [1, 3, 2, 3, 1];

const result = solve(A);
console.log(result);

function solve(A) {
    return mergeSort(A, 0, A.length - 1);
}
// t.c - nlogn
// sc - n 
function mergeSort(a, start, end) {
    if (start >= end) {
        return 0;
    }
// before merging we count the reverse pairs manually.

    const mid = Math.floor((start + end) / 2);

    const ac = mergeSort(a, start, mid);
    const bc = mergeSort(a, mid + 1, end);
    let count = 0;
    let i = start;
    let j = mid + 1;
    //We will do a usual merge sort, but before calling the merge function, 
    while (i <= mid && j <= end) {
        if (a[i] > 2 * a[j]) {
            count = count + (mid - i + 1);
            j++;
        } else {
            i++;
        }
    }

    merge(a, start, mid, end);
    return ac + bc + count;
}

function merge(A, start, mid, end) {
    const temp = new Array(end - start + 1);
    let i = start;
    let j = mid + 1;
    let k = 0;

    while (i <= mid && j <= end) {
        if (A[i] < A[j]) {
            temp[k] = A[i];
            i++;
            k++
        } else {
            temp[k] = A[j];
            j++;
            k++
        }
    }

    while (i <= mid) {
        temp[k] = A[i];
        i++;
        k++;
    }
    while (j <= end) {
        temp[k] = A[j];
        j++;
        k++;
    }

    for (i = start; i <= end; i++) {
        A[i] = temp[i - start];
    }
}

