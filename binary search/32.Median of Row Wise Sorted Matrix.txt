Problem Statement: 

Given a row-wise sorted matrix of size r*c, where r is no. of rows and c is no. of columns, find the median in the given matrix.

Assume â€“ r*c is odd

Examples:

Example 1:
Input: 
r = 3 , c = 3
1 4 9 
2 5 6
3 8 7
Output: Median = 5
Explanation: If we find the linear sorted array, the array becomes 1 2 3 4 5 6 7 8 9
So, median = 5

Example 2:
Input: 
r = 3 , c = 3
1 3 8
2 3 4
1 2 5
Output: Median = 3
Explanation: If we find the linear sorted array, the array becomes 1 1 2 2 3 3 4 5 7 8
So, median = 3

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Example 1 // 1 2 3 3 5 6 6 9 9 
const A1 = [
    [1, 3, 5],
    [2, 6, 9],
    [3, 6, 9],
];
console.log("Median is", ismedian(A1));

// Example 2 //1 2 3 4 5 6 7 8 9 
const A2 = [
    [1, 3, 4],
    [2, 5, 6],
    [7, 8, 9],
];
console.log("Median is", ismedian(A2));

const A3 = [[1, 2], [3, 4]]

console.log("Median is", ismedian(A3));

function count(arr, x) {
    // this is a upper bound function(exact same code as upper function)
    let i = 0;
    let j = arr.length - 1;
    let ans = -1;

    while (i <= j) {
        let m = Math.floor((i + j) / 2);

        if (arr[m] > x) {
            ans = m;
            j = m - 1;
        } else {
            i = m + 1;
        }
    }

    if (ans === -1) {
        return arr.length;
    }

    return ans;
}

function ismedian(matrix) {
    let l = 0;
    let r = 0;
    let n = matrix.length;
    let m = matrix[0].length;
    let mid;
    let req = parseInt((n * m) / 2) + 1;

    for (let row = 0; row < n; row++) {
        r = Math.max(r, matrix[row][m - 1]);
    }

    let ans = -1;

    while (l <= r) {
        mid = l + Math.floor((r - l) / 2);
        let cnt = 0;

        for (let row = 0; row < n; row++) {
            let p = count(matrix[row], mid);
            cnt += p;
        }

        if (cnt >= req) {
            ans = mid;
            r = mid - 1;
        } else {
            l = mid + 1;
        }
    }

    return ans;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////