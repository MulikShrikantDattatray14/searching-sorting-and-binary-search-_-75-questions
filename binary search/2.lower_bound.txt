Problem Statement:

Given a sorted array of N integers and an integer x, write a program to find the lower bound of x.
Pre-requisite: Binary Search algorithm

Examples
Example 1:
Input Format: N = 4, arr[] = {1,2,2,3}, x = 2
Result: 1
Explanation: Index 1 is the smallest index such that arr[1] >= x.

Example 2:
Input Format: N = 5, arr[] = {3,5,8,15,19}, x = 9
Result: 3
Explanation: Index 3 is the smallest index such that arr[3] >= x.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

What is Lower Bound?

The lower bound algorithm finds the first or the smallest index in a sorted array where the value at that index is greater than or equal to a given key i.e. x.

The lower bound is the smallest index, ind, where arr[ind] >= x. But if any such index is not found, the lower bound algorithm returns n i.e. size of the given array.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Brute Force Approach : 

Algorithm / Intuition : 
Naive approach (Using linear search):  our approach involves traversing the array starting from the beginning. During this traversal, each element will be compared with the target value, x. The index, i, where the condition arr[i] >= x is first satisfied, will be the answer.

CODE :- 

function lowerBound(arr, n, x) {
    for (let i = 0; i < n; i++) {
        if (arr[i] >= x) {
            // lower bound found:
            return i;
        }
    }
    return n;
}

let arr = [3, 5, 8, 15, 19];
let n = 5, x = 6;
let ind = lowerBound(arr, n, x);
console.log("The lower bound is the index:", ind);
Complexity Analysis : 
Time Complexity: O(N), where N = size of the given array.
Reason: In the worst case, we have to travel the whole array. This is basically the time complexity of the linear search algorithm.

Space Complexity: O(1) as we are using no extra space.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach
Algorithm / Intuition
Optimal Approach (Using Binary Search): 

Complexity Analysis :
Time Complexity: O(logN), where N = size of the given array.
Reason: We are basically using the Binary Search algorithm.

Space Complexity: O(1) as we are using no extra space.
//////////////////////////////////////////////////////////////////////////////

function lowerBound(arr, n, x) {
    let low = 0;
    let high = n - 1;
    let ans = n; // always consider it to be maximum as we are searching for the minimum index.

    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        // maybe an answer
        if (arr[mid] >= x) {//ans is larger, so ignore the right half
            ans = mid;
            // look for smaller index on the left
            high = mid - 1;
        } else {
            low = mid + 1; // look on the right
        }
    }
    return ans;
}

let arr = [3, 5, 8, 15, 19];
let n = 5,
    x = 9;
let ind = lowerBound(arr, n, x);
console.log("The lower bound is the index:", ind);
///////////////////////////////////////////////////////////////////////////////