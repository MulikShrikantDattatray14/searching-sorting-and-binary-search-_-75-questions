First and Last Occurrences in Array : 

Problem Statement: 

Given a sorted array arr of n integers and a target value k. Write a program to find the indices of the first and the last occurrences of the target value. If the target is not found then return -1 as indices.

Note: Consider 0-based indexing

Pre-requisites: Lower Bound,  Upper Bound, & Binary Search

Examples
Example 1:
Input Format: n = 8, arr[] = {2, 4, 6, 8, 8, 8, 11, 13}, k = 8
Result: 3 5
Explanation: The first occurrence of 8 is at index 3 and the last occurrence is at index 5.

Example 2:
Input Format: n = 8, arr[] = {2, 4, 6, 8, 8, 8, 11, 13}, k = 10
Result: -1 -1
Explanation: The target value is not present in the array. So, we have returned -1 as the indices of the first and the last occurrence.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Solution 1:
Algorithm / Intuition :
Solution 1 (Using linear search): 
Basically, we will traverse the entire array to find the first and the last occurrences. 


CODE : 

function firstAndLastPosition(arr, n, k) {
    let first = -1, last = -1;
    for (let i = 0; i < n; i++) {
        if (arr[i] === k) {
            if (first === -1) first = i;
            last = i;
        }
    }
    return [first, last];
}

let arr = [2, 4, 6, 8, 8, 8, 11, 13];
let n = 8, k = 8;
let ans = firstAndLastPosition(arr, n, k);
console.log("The first and last positions are:", ans[0], ans[1]);


Complexity Analysis :
Time Complexity: O(N), N = size of the given array
Reason: We are traversing the entire array.

Space Complexity: O(1) as we are not using any extra space.

///////////////////////////////////////////////////////////////////////////////////////////

Solution 2:
Algorithm / Intuition
Solution 2: (Using lower and upper bound): 

 Lower bound returns an index, ind, such that arr[ind] >= x(i.e. target element), and similarly, the upper bound returns the index of the first element that is greater than the target element i.e. arr[ind] > x.

For example, if the given array is {2, 4, 6, 8, 8, 8, 11, 13}, and the target k = 8, the lower bound of 8 will be at index 3(lb), and the upper bound will return index 6(ub). 

Therefore,
the first occurrence of the element = lb(the index returned by lower bound)
and the last occurrence = (ub-1)(ub = the index returned by upper bound).

There are some edge cases.

Edge Case 1: If the element is not present in the array.

If the target number is not present in the array, the lower bound will return the index of the nearest greater element. So, in the code, we have to check the following:
If arr[lb] != k: The element is not present in the array and so, there will be no first or last occurrences. So, we will return -1.
Edge Case 2: If the element is not present in the array and all the array elements are smaller than the target number.

In this case, lower bound will return the imaginary index n i.e. the size of the array. We need to handle this case in our code as well.
If lb == n: No first or last occurrence exists. So, we will return -1.
Note: Based on the index returned by the lower bound, we will decide if we need to calculate the upper bound because the absence of the first occurrence will guarantee that there will be no last occurrence.

CODE : 


//https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

function upperBound(arr, n, x) {
    //upper bound is the smallest index, ind, where arr[ind] > x.But if any such index is not found, the upper bound algorithm returns n i.e. size of the given array.
    let low = 0; let high = n - 1;
    let ans = n;
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        // maybe an answer
        if (arr[mid] > x) {
            ans = mid;
            // look for smaller index on the left
            high = mid - 1;
        }
        else {
            low = mid + 1; // look on the right
        }
    }
    return ans;
}

function lowerBound(arr, n, x) {
    //lower bound is the smallest index, ind, where arr[ind] >= x. But if any such index is not found, the lower bound algorithm returns n i.e. size of the given array.
    let low = 0, high = n - 1;
    let ans = n;
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        // maybe an answer
        if (arr[mid] >= x) {
            ans = mid;
            // look for smaller index on the left
            high = mid - 1;
        }
        else {
            low = mid + 1; // look on the right
        }
    }
    return ans;
}

function firstAndLastPosition(arr, n, k) {
    let lb = lowerBound(arr, n, k);
    if (lb === n || arr[lb] !== k) return [-1, -1];
    let ub = upperBound(arr, n, k);
    return [lb, ub - 1];
}

let arr = [2, 4, 6, 8, 8, 8, 11, 13];
let n = 8, k = 8;
let ans = firstAndLastPosition(arr, n, k);
console.log("The first and last positions are:", ans[0], ans[1]);


// Complexity Analysis:
// Time Complexity: O(2 * logN), where N = size of the given array.
//     Reason: We are basically using a lower-bound and upper - bound algorithm.

// Space Complexity: O(1) as we are using no extra space.
