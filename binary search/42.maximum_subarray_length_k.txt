

//question :-Given an array of positive integer , find the maximum k such that maximum  subarray sum  of length K<=B.

let arr = [3, 2, 5, 4, 6, 3, 7, 2];//4
let B = 20;

let N = arr.length;
let low = 1;
let high = N;
let ans = -1; // Initialize with -1 to handle edge case where no K satisfies the condition
while (low <= high) {
    // here m is a m size window
    let m = Math.floor((low + high) / 2);

    if (subarraySum(arr, m) <= B) {
        // Change the condition to check if subarray sum is less than or equal to B
        ans = m;
        low = m + 1; // Change low to m + 1 to search for higher values of k
    } else {
        high = m - 1;
    }
}
if (ans === -1) {
    console.log("No subarray sum is less than or equal to", B);
} else {
    console.log(
        "The maximum K such that the maximum subarray sum of length K is less than or equal to",
        B,
        "is",
        ans
    );
}

function subarraySum(arr, K) {
    //check for every k size window.
    let N = arr.length;
    let sum = 0;
    for (let i = 0; i < K; i++) {
        sum = sum + arr[i];
    }
    let maxSum = sum;
    let s = 1;
    let e = K;

    while (e < N) {
        sum = sum - arr[s - 1] + arr[e];
        if (sum > maxSum) maxSum = sum;
        s++;
        e++;
    }
    return maxSum;
}
