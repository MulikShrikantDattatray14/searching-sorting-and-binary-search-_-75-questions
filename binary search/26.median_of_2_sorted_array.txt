Median of Two Sorted Arrays of different sizes : 

Problem Statement: Given two sorted arrays arr1 and arr2 of size m and n respectively, return the median of the two sorted arrays. The median is defined as the middle value of a sorted list of numbers. In case the length of the list is even, the median is the average of the two middle elements.

Examples :-
Example 1:
Input Format: n1 = 3, arr1[] = {2,4,6}, n2 = 3, arr2[] = {1,3,5}
Result: 3.5
Explanation: The array after merging 'a' and 'b' will be { 1, 2, 3, 4, 5, 6 }. As the length of the merged list is even, the median is the average of the two middle elements. Here two medians are 3 and 4. So the median will be the average of 3 and 4, which is 3.5.

Example 2:
Input Format: n1 = 3, arr1[] = {2,4,6}, n2 = 2, arr2[] = {1,3}
Result: 3
Explanation: The array after merging 'a' and 'b' will be { 1, 2, 3, 4, 6 }. The median is simply 3.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



let A = [1, 2, 3]
let B = [4]

let answer = findMedianSortedArrays1(A, B);
console.log(answer);


function findMedianSortedArrays1(arr1, arr2) {

    let ans;
    // lets keep arr1 of minimum size always , so lets swap
    if (arr1.length > arr2.length) {
        return findMedianSortedArrays1(arr2, arr1);
    }
    //https://www.youtube.com/watch?v=yD7wV8SyPrc

    let n1 = arr1.length;
    let n2 = arr2.length;
    let low = 0;
    let high = n1;
    while (low <= high) {
        let cut1 = parseInt((low + high) / 2);
        let cut2 = parseInt((n1 + n2 + 1) / 2) - cut1;
        let left1 = cut1 == 0 ? Number.MIN_SAFE_INTEGER : arr1[cut1 - 1];
        let left2 = cut2 == 0 ? Number.MIN_SAFE_INTEGER : arr2[cut2 - 1];
        let right1 = cut1 == n1 ? Number.MAX_SAFE_INTEGER : arr1[cut1];
        let right2 = cut2 == n2 ? Number.MAX_SAFE_INTEGER : arr2[cut2];
        //note : left1<right2 and left2 < right1
        if (left1 > right2) {//move window leftwards
            high = cut1 - 1;
        } else if (left2 > right1) {// move window rightwards
            low = cut1 + 1;
        } else {
            ans =
                (((n1 + n2) % 2) == 0)
                    ? ((Math.max(left1, left2) + Math.min(right1, right2)) / 2)
                    : Math.max(left1, left2);
            break;
        }
    }
    return (ans.toFixed(1));
}