Q1. Painter's Partition Problem :-


Problem Description :-

Given 2 integers A and B and an array of integers C of size N. Element C[i] represents the length of ith board.
You have to paint all N boards [C0, C1, C2, C3 â€¦ CN-1]. There are A painters available and each of them takes B units of time to paint 1 unit of the board.

Calculate and return the minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of the board.
NOTE:
1. 2 painters cannot share a board to paint. That is to say, a board cannot be painted partially by one painter, and partially by another.
2. A painter will only paint contiguous boards. This means a configuration where painter 1 paints boards 1 and 3 but not 2 is invalid.

Return the ans % 10000003.



Problem Constraints
1 <= A <= 1000
1 <= B <= 106
1 <= N <= 105
1 <= C[i] <= 106



Input Format
The first argument given is the integer A.
The second argument given is the integer B.
The third argument given is the integer array C.



Output Format
Return minimum time required to paint all boards under the constraints that any painter will only paint contiguous sections of board % 10000003.



Example Input
Input 1:

 A = 2
 B = 5
 C = [1, 10]
Input 2:

 A = 10
 B = 1
 C = [1, 8, 11, 3]


Example Output
Output 1:

 50
Output 2:

 11


Example Explanation
Explanation 1:

 Possibility 1:- One painter paints both blocks, time taken = 55 units.
 Possibility 2:- Painter 1 paints block 1, painter 2 paints block 2, time take = max(5, 50) = 50
 There are no other distinct ways to paint boards.
 ans = 50 % 10000003
Explanation 2:

 Each block is painted by a painter so, Painter 1 paints block 1, painter 2 paints block 2, painter 3 paints block 3 
 and painter 4 paints block 4, time taken = max(1, 8, 11, 3) = 11
 ans = 11 % 10000003

 ==============================================================================================================================================================================================================================

 module.exports = {
    //param A : integer
    //param B : integer
    //param C : array of integers
    //return an integer
    paint: function (A, B, C) {

        function countStudents(arr, pages) {
            var n = arr.length; // size of array
            var students = 1;
            var pagesStudent = 0;
            for (var i = 0; i < n; i++) {
                if (pagesStudent + (arr[i]*B) <= pages) {
                    // add pages to current student
                    pagesStudent += (arr[i]*B);
                } else {
                    // add pages to next student
                    students++;
                    pagesStudent =(arr[i]*B);
                }
            }
            //return the number of students to whom we can allocate the books.

            return students;
        }
        function findPages(arr, n, m) {
            // book allocation  is impossible-When the number of books is lesser than the number of students,we cannot allocate books to all the students even if we give only a single book to each student. So, if m > n, we should return -1.
            if (m > n) return -1;
            let ans;
            var low = Math.max(...arr)*B;
            var high = (arr.reduce((a, b) => a + b, 0))*B;
            while (low <= high) {
                var mid = Math.floor((low + high) / 2);
                //here mid is pages
                //maximum number of pages assigned to a student is minimum.
                var students = countStudents(arr, mid);
                if (students > m) {// as all the students have been allocated all the pages , but now lets minimise the maximum , so more towards right, lets say m=4 , but we get student as 5 , as we already got the answer , lets move towards right to get best answer.

                    low = mid + 1;
                } else {// students < m
                    ans = mid;
                    high = mid - 1;
                }
            }

            return ans;
        }
        var arr = C
        var n = arr.ength;
        var m = A
        var ans = findPages(arr, n, m);
        return (ans) % 10000003.
    }
};
