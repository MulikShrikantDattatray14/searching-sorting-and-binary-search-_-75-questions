Problem Statement: Given an integer array arr of size N, sorted in ascending order (may contain duplicate values) and a target value k. Now the array is rotated at some pivot point unknown to you. Return True if k is present and otherwise, return False. 

Pre-requisite: Search Element in Rotated Sorted Array I & Binary Search algorithm

Examples :-
Example 1:
Input Format: arr = [7, 8, 1, 2, 3, 3, 3, 4, 5, 6], k = 3
Result: True
Explanation: The element 3 is present in the array. So, the answer is True.

Example 2:
Input Format: arr = [7, 8, 1, 2, 3, 3, 3, 4, 5, 6], k = 10
Result: False
Explanation: The element 10 is not present in the array. So, the answer is False.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Brute Force Approach :
Algorithm / Intuition :
Naive Approach (Brute force): 
One straightforward approach we can consider is using the linear search algorithm. Using this method, we will traverse the array to check if the target is present in the array. If it is found we will simply return True and otherwise, we will return False.

CODE : 


function searchInARotatedSortedArrayII(arr, k) {
    for (let i = 0; i < arr.length; i++) {
        if (arr[i] === k) {
            return true;
        }
    }
    return false;
}

let arr = [7, 8, 1, 2, 3, 3, 3, 4, 5, 6];
let k = 3;
let ans = searchInARotatedSortedArrayII(arr, k);
if (!ans) {
    console.log("Target is not present.");
} else {
    console.log("Target is present in the array.");
}

Complexity Analysis
Time Complexity: O(N), N = size of the given array.
Reason: We have to iterate through the entire array to check if the target is present in the array.

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Optimal Approach : 
Algorithm / Intuition
Optimal Approach(Using Binary Search): 

Complexity Analysis :
Time Complexity: O(logN) for the best and average case. O(N/2) for the worst case. Here, N = size of the given array.
Reason: In the best and average scenarios, the binary search algorithm is primarily utilized and hence the time complexity is O(logN). However, in the worst-case scenario, where all array elements are the same but not the target (e.g., given array = {3, 3, 3, 3, 3, 3, 3}), we continue to reduce the search space by adjusting the low and high pointers until they intersect. This worst-case situation incurs a time complexity of O(N/2).

Space Complexity: O(1)
Reason: We have not used any extra data structures, this makes space complexity, even in the worst case as O(1).

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



// array contains duplicate elements also .
function searchInARotatedSortedArrayII(arr, k) {
    let n = arr.length; // size of the array.
    let low = 0, high = n - 1;
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        //if mid points the target
        if (arr[mid] === k) return true;

        //Handle duplicates by moving pointers towards the center
        //// shrinking the search space
        while (low < mid && arr[low] === arr[mid]) {
            low++;
        }
        while (mid < high && arr[mid] === arr[high]) {
            high--;
        }

        //if left part is sorted:
        if (arr[low] <= arr[mid]) {
            if (arr[low] <= k && k <= arr[mid]) {
                //element exists in left of mid, so ignore the right part
                high = mid - 1;
            }
            else {
                //element exists in right of mid, so ignore the left part
                low = mid + 1;
            }
        }
        else { //if right part is sorted:
            if (arr[mid] <= k && k <= arr[high]) {
                //element exists in right of mid, so ignore the left part
                low = mid + 1;
            }
            else {
                //element exists in left of mid, so ignore the right part
                high = mid - 1;
            }
        }
    }
    return false;
}

let arr = [7, 8, 1, 2, 3, 3, 3, 4, 5, 6];
let k = 3;
let ans = searchInARotatedSortedArrayII(arr, k);
if (!ans) {
    console.log("Target is not present.");
} else {
    console.log("Target is present in the array.");
}