K-th element of two Arrays :-

Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the kth position of the final sorted array.
 

Example 1:-

Input:-

arr1[] = {2, 3, 6, 7, 9}
arr2[] = {1, 4, 8, 10}
k = 5

Output:-
6

Explanation:-
The final sorted array would be -
1, 2, 3, 4, 6, 7, 8, 9, 10
The 5th element of this array is 6.



Example 2:
Input:
arr1[] = {100, 112, 256, 349, 770}
arr2[] = {72, 86, 113, 119, 265, 445, 892}
k = 7
Output:
256
Explanation:
Final sorted array is - 72, 86, 100, 112,
113, 119, 256, 265, 349, 445, 770, 892
7th element of this array is 256.

Your Task:  
You don't need to read input or print anything. Your task is to complete the function kthElement() which takes the arrays arr1[], arr2[], its size N and M respectively and an integer K as inputs and returns the element at the Kth position.


Expected Time Complexity: O(Log(N) + Log(M))
Expected Auxiliary Space: O(Log (N))


Constraints:
1 <= N, M <= 106
0 <= arr1i, arr2i < INT_MAX
1 <= K <= N+M



//===============================================================================================================================================================================================================================

// A = [100, 112, 256, 349, 770]
// B = [72, 86, 113, 119, 265, 445, 892]
// k = 7 // 256

let A = [2, 3, 6, 7, 9];
let B = [1, 4, 8, 10, 11, 12];
let k = 8;// ans is 6

let answer = kthElement(A, B, k);
console.log(answer);

function kthElement(arr1, arr2, k) {
    let n1 = arr1.length;
    let n2 = arr2.length;

    // Make sure arr1 is smaller or equal in size
    if (n1 > n2) {
        return kthElement(arr2, arr1, k);
    }
    //https://www.youtube.com/watch?v=D1oDwWCq50g&t=614s
    // see striver explaination for why to take low and high .
    let low = Math.max(0, k - n2); // Ensure low is within bounds // 8-6=2
    let high = Math.min(k, n1); // high=5

    while (low <= high) {
        let cut1 = parseInt((low + high) / 2);
        let cut2 = k - cut1;

        let left1 = cut1 === 0 ? Number.MIN_SAFE_INTEGER : arr1[cut1 - 1];
        let left2 = cut2 === 0 ? Number.MIN_SAFE_INTEGER : arr2[cut2 - 1];
        let right1 = cut1 === n1 ? Number.MAX_SAFE_INTEGER : arr1[cut1];
        let right2 = cut2 === n2 ? Number.MAX_SAFE_INTEGER : arr2[cut2];

        if (left1 > right2) {
            high = cut1 - 1;
        } else if (left2 > right1) {
            low = cut1 + 1;
        } else {
            return Math.max(left1, left2);
        }
    }

    // This line should never be reached
    return -1;
}
