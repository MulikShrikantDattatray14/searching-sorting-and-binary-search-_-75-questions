Problem Statement:-

Problem Description
Farmer John has built a new long barn with N stalls. Given an array of integers A of size N where each element of the array represents the location of the stall and an integer B which represents the number of cows.

His cows don't like this barn layout and become aggressive towards each other once put into a stall. To prevent the cows from hurting each other, John wants to assign the cows to the stalls, such that the minimum distance between any two of them is as large as possible. What is the largest minimum distance?



Problem Constraints
2 <= N <= 100000
0 <= A[i] <= 109
2 <= B <= N



Input Format
The first argument given is the integer array A.
The second argument given is the integer B.



Output Format
Return the largest minimum distance possible among the cows.



Example Input
Input 1:

A = [1, 2, 3, 4, 5]
B = 3
Input 2:

A = [1, 2]
B = 2


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 John can assign the stalls at location 1, 3 and 5 to the 3 cows respectively. So the minimum distance will be 2.
Explanation 2:

 The minimum distance will be 1.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Brute Force Approachm:
Algorithm / Intuition :
Naive Approach: 
The extremely naive approach is to check all possible distances from 1 to max(stalls[])-min(stalls[]). The maximum distance for which the function canWePlace() returns true, will be our answer.

Algorithm:
1.First, we will sort the given stalls[] array.
2.We will use a loop(say i) to check all possible distances.
3.Next, inside the loop, we will send each distance, i, to the function canWePlace() function to check if it is possible to place the cows.
4.We will return (i-1), where i is the minimum distance for which the function canWePlace() returns false. Because (i-1) is the maximum distance for which we can place all the cows and for the distances >= i, it becomes impossible.
5.Finally, if we are outside the loop, we can conclude the minimum possible distance should be max(stalls[])-min(stalls[]). And we will return this value.

CODE : 



// maximise the minimum possible distance. 

function canWePlace(stalls, dist, cows) {//[0, 3, 4, 7, 10, 9];
    var n = stalls.length; // size of array
    var cntCows = 1; // no. of cows placed
    var last = stalls[0]; // position of last placed cow
    for (var i = 1; i < n; i++) {
        if (stalls[i] - last >= dist) {
            cntCows++; // place next cow
            last = stalls[i]; // update the position of last placed cow
        }
        if (cntCows >= cows) return true;
    }
    return false;
}

function aggressiveCows(stalls, k) {
    var n = stalls.length; // size of array
    // sort the stalls[]
    stalls.sort((a, b) => a - b);

    var limit = stalls[n - 1] - stalls[0];
    for (var i = 1; i <= limit; i++) {
        if (canWePlace(stalls, i, k) === false) {
            return i - 1;
        }
    }
    return limit;
}

var stalls = [0, 3, 4, 7, 10, 9];
var k = 4;
var ans = aggressiveCows(stalls, k);
console.log("The maximum possible minimum distance is:", ans);


Complexity Analysis :

Time Complexity: O(NlogN) + O(N *(max(stalls[])-min(stalls[]))), where N = size of the array, max(stalls[]) = maximum element in stalls[] array, min(stalls[]) = minimum element in stalls[] array.
Reason: O(NlogN) for sorting the array. We are using a loop from 1 to max(stalls[])-min(stalls[]) to check all possible distances. Inside the loop, we are calling canWePlace() function for each distance. Now, inside the canWePlace() function, we are using a loop that runs for N times.

Space Complexity: O(1) as we are not using any extra space to solve this problem.

//////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach :
Algorithm / Intuition:
Optimal Approach(Using Binary Search): 

Algorithm:
1.First, we will sort the given stalls[] array.
2.Place the 2 pointers i.e. low and high: Initially, we will place the pointers. The pointer low will point to 1 and the high will point to (stalls[n-1]-stalls[0]). As the ‘stalls[]’ is sorted, ‘stalls[n-1]’ refers to the maximum, and ‘stalls[0]’ is the minimum element.
3.Calculate the ‘mid’: Now, inside the loop, we will calculate the value of ‘mid’ using the following formula:
mid = (low+high) // 2 ( ‘//’ refers to integer division)
4.Eliminate the halves based on the boolean value returned by canWePlace():
We will pass the potential distance, represented by the variable ‘mid’, to the ‘canWePlace()‘ function. This function will return true if it is possible to place all the cows with a minimum distance of ‘mid’.
 4.1.If the returned value is true: On satisfying this condition, we can conclude that the number ‘mid’ is one of our possible answers. But we want the maximum number. So, we will eliminate the left half and consider the right half(i.e. low = mid+1).
 4.2.Otherwise, the value mid is greater than the distance we want. This means the numbers greater than ‘mid’ should not be considered and the right half of ‘mid’ consists of such numbers. So, we will eliminate the right half and consider the left half(i.e. high = mid-1).
5.Finally, outside the loop, we will return the value of high as the pointer will be pointing to the answer.
The steps from 3-4 will be inside a loop and the loop will continue until low crosses high.

Note: It is always the opposite polarity. Initially the pointer ‘high’ was in the ‘not-possible’ half and so it ends up in the ‘possible’ half. Similarly, ‘low’ was initially in the ‘possible’ part and it ends up in the ‘not-possible’ part.

Note: Please make sure to refer to the video and try out some test cases of your own to understand, how the pointer ‘high’ will be always pointing to the answer in this case. This is also the reason we have not used any extra variable here to store the answer.


Complexity Analysis :
Time Complexity: O(NlogN) + O(N * log(max(stalls[])-min(stalls[]))), where N = size of the array, max(stalls[]) = maximum element in stalls[] array, min(stalls[]) = minimum element in stalls[] array.
Reason: O(NlogN) for sorting the array. We are applying binary search on [1, max(stalls[])-min(stalls[])]. Inside the loop, we are calling canWePlace() function for each distance, ‘mid’. Now, inside the canWePlace() function, we are using a loop that runs for N times.

Space Complexity: O(1) as we are not using any extra space to solve this problem.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function canWePlace(stalls, dist, cows) {
    const n = stalls.length; // size of array
    // first cow is placed at the 1st stall 
    let cntCows = 1; // number of cows placed
    let last = stalls[0]; // position of last placed cow
    for (let i = 1; i < n; i++) {
        if (stalls[i] - last >= dist) {
            cntCows++; // place next cow
            last = stalls[i]; // update the last location
        }
        if (cntCows >= cows) return true;
    }
    return false;
}

function aggressiveCows(stalls, k) {
    const n = stalls.length; // size of array
    stalls.sort((a, b) => a - b); // sort the stalls array
    let ans;
    let low = 1,
        high = stalls[n - 1] - stalls[0]; // distance between 2 cows
    // apply binary search
    while (low <= high) {
        const mid = Math.floor((low + high) / 2);
        if (canWePlace(stalls, mid, k)) {
            // mid should be max possible
            ans = mid;
            low = mid + 1; // thus try moving to right always
        } else {
            high = mid - 1;
        }
    }
    return ans;// or return high
}

const stalls = [0, 3, 4, 7, 10, 9];
const k = 4;
const ans = aggressiveCows(stalls, k);
console.log("The maximum possible minimum distance is:", ans);


