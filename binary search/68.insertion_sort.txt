Insertion Sort is a simple sorting algorithm that builds the final sorted array one item at a time. It is much less efficient on large lists than more advanced algorithms such as Quick Sort or Merge Sort, but it performs well for small datasets or partially sorted datasets. The algorithm is based on the idea of maintaining a sorted sublist and iteratively inserting elements from the unsorted part into the sorted part.

Here's the logic and approach used in Insertion Sort:

Building the Sorted Sublist:

Start with the assumption that the first element in the array is a sorted sublist of size 1.
Iterate through the unsorted part of the array, and for each element, compare it with the elements in the sorted sublist, moving elements to the right until the correct position is found.
Insertion Process:

Select an element from the unsorted part of the array.
Compare the selected element with the elements in the sorted sublist until you find the correct position for insertion.
Shift the elements in the sorted sublist to the right to make space for the inserted element.
Insert the element in its correct position in the sorted sublist.
Repeat:

Repeat the insertion process for each element in the unsorted part of the array until the entire array is sorted.
The pseudocode for the Insertion Sort algorithm can be summarized as follows:

function insertionSort(arr):
    for i = 1 to length(arr) - 1:
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j = j - 1
        arr[j + 1] = key


Time Complexity:

Best case: O(n) - When the array is already sorted, and each element just needs to be compared with its predecessor.
Average case: O(n^2) - In the average case, each element may need to be compared with every other element in the sorted sublist.
Worst case: O(n^2) - When the array is sorted in reverse order, and each element needs to be compared with every element in the sorted sublist.
Space Complexity:

O(1) - Insertion Sort is an in-place sorting algorithm, meaning it doesn't require additional memory proportional to the input size.
Insertion Sort is a stable sorting algorithm (preserves the relative order of equal elements) and is often used for small datasets or as a building block in more complex algorithms.

================================================================================================================================================================================================================================

let A = [12, 2, 4, 5, 6, 78, 2, 11, 90]//[ 2,  2,  4,  5, 6,11, 12, 78, 90]
//https://www.youtube.com/watch?v=wWhAhp6PIuQ
for (let i = 1; i < A.length; i++) {
    let temp = A[i];
    let j = i - 1;
    //elements in the range[0,i-1] is already sorted.
    while (j >= 0 && A[j] > temp) {
        // move the 
        A[j + 1] = A[j];
        j--;
    }
    A[j + 1] = temp;
}
console.log(A)