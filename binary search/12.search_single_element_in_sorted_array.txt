Search Single Element in a sorted array
Problem Statement: 

Given an array of N integers. Every number in the array except one appears twice. Find the single number in the array.

Pre-requisite: Binary Search Algorithm

Examples
Example 1:
Input Format: arr[] = {1,1,2,2,3,3,4,5,5,6,6}
Result: 4
Explanation: Only the number 4 appears once in the array.

Example 2:

Input Format: arr[] = {1,1,3,5,5}
Result: 3
Explanation: Only the number 3 appears once in the array.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Brute Force Approach 1:
Algorithm / Intuition :
Naive Approach(Brute force): 
A crucial observation to note is that if an element appears twice in a sequence, either the preceding or the subsequent element will also be the same. But only for the single element, this condition will not be satisfied. So, to check this the condition will be the following:

If arr[i] != arr[i-1] and arr[i] != arr[i+1]: If this condition is true for any element, arr[i], we can conclude this is the single element.
Edge Cases:

If n == 1: This means the array size is 1. If the array contains only one element, we will return that element only.
If i == 0: This means this is the very first element of the array. The only condition, we need to check is: arr[i] != arr[i+1].
If i == n-1: This means this is the last element of the array. The only condition, we need to check is: arr[i] != arr[i-1].
So, we will traverse the array and we will check for the above conditions.

CODE : 



function singleNonDuplicate(arr) {
    var n = arr.length; // Size of the array
    if (n === 1) return arr[0];

    for (var i = 0; i < n; i++) {
        // Check for first index
        if (i === 0) {
            if (arr[i] !== arr[i + 1])
                return arr[i];
        }
        // Check for last index
        else if (i === n - 1) {
            if (arr[i] !== arr[i - 1])
                return arr[i];
        }
        else {
            if (arr[i] !== arr[i - 1] && arr[i] !== arr[i + 1])
                return arr[i];
        }
    }

    // Dummy return statement
    return -1;
}

var arr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6];
var ans = singleNonDuplicate(arr);
console.log("The single element is: " + ans);


Complexity Analysis :
Time Complexity: O(N), N = size of the given array.
Reason: We are traversing the entire array.

Space Complexity: O(1) as we are not using any extra space.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Brute Force Approach 2:
Algorithm / Intuition
Naive Approach(Using XOR): 
We can simplify the above approach using the XOR operation. We need to remember 2 important properties of XOR:

a ^ a = 0, XOR of two same numbers results in 0.
a ^ 0 = a, XOR of a number with 0 always results in that number.
Now, if we XOR all the array elements, all the duplicates will result in 0 and we will be left with a single element.

CODE: 

function singleNonDuplicate(arr) {
    let n = arr.length; // Size of the array
    let ans = 0;
    // XOR all the elements
    for (let i = 0; i < n; i++) {
        ans = ans ^ arr[i];
    }
    return ans;
}

let arr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6];
let ans = singleNonDuplicate(arr);
console.log("The single element is:", ans);


Complexity Analysis :
Time Complexity: O(N), N = size of the given array.
Reason: We are traversing the entire array.

Space Complexity: O(1) as we are not using any extra space.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Optimal Approach : 
Algorithm / Intuition
Optimal Approach(Using Binary Search): 

Complexity Analysis :
Time Complexity: O(logN), N = size of the given array.
Reason: We are basically using the Binary Search algorithm.

Space Complexity: O(1) as we are not using any extra space.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function singleNonDuplicate(arr) {
    let n = arr.length; // Size of the array

    // Edge cases:
    if (n === 1) return arr[0];
    if (arr[0] !== arr[1]) return arr[0];// very first element in the array
    if (arr[n - 1] !== arr[n - 2]) return arr[n - 1];// very last element in the array .

    let low = 1, high = n - 2;
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);

        // If arr[mid] is the single element:
        if (arr[mid] !== arr[mid + 1] && arr[mid] !== arr[mid - 1]) {
            return arr[mid];
        }

        // We are in the left:-
        if ((mid % 2 === 1 && arr[mid] === arr[mid - 1])
            || (mid % 2 === 0 && arr[mid] === arr[mid + 1])) {
            // Eliminate the left half: and move rightwards
            // we are on left, everything is fine on left of mid, so eliminate left and move right wards.
            low = mid + 1;
        }
        else if ((mid % 2 === 1 && arr[mid] === arr[mid + 1])
            || (mid % 2 === 0 && arr[mid] === arr[mid - 1])) {// We are in the right:
            // Eliminate the right half:
            high = mid - 1;
        }
    }

    // Dummy return statement:
    return -1;
}

let arr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6];
let ans = singleNonDuplicate(arr);
console.log("The single element is:", ans);
